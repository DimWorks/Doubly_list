#pragma once

typedef struct node
{
	void* data;
	struct node* previous;
	struct node* next;
} node;

int is_empty(node*);    //прототип функции проверки на наличие элементов в списке
int count(node*);   //прототип функции возвращающей количество элементов в списке

void push_to_head(node**, void*); //прототип функции добавления элемента в список с головы
void push_array_to_head(node**, int[], int);    //прототип функции добавления элементов из массива в список с головы
void push_to_tail(node*, int); //прототип функции добавления элемента в список с хвоста
void push_to_position(node**, int, int);    //прототип функции добавления элемента в список с указанием позиции

int pop_from_head(node**); //прототип функции удаления элемента из списка с головы, (функция возвращает данные удаляемого элемента)
int pop_from_tail(node*); //прототип функции удаления элемента из списка с хвоста, (функция возвращает данные удаляемого элемента)
int pop_from_position(node** , int);    //прототип функции удаления элемента из списка с указанием позиции, (функция возвращает данные удаляемого элемента)

int edit_from_head(node*, int); //прототип функции редактирования элемента из списка с головы, (функция возвращает старые данные редактируемого элемента)
int edit_from_tail(node*, int); //прототип функции редактирования элемента из списка с хвоста, (функция возвращает старые данные редактируемого элемента)
int edit_from_position(node*, int, int);    //прототип функции редактирования элемента из списка с указанием позиции, (функция возвращает старые данные редактируемого элемента)

void print_from_head(node*);    //прототип функции вывода на экран всех элементов списка с головы
void real_print_from_tail(node*);    //прототип функции вспомогательной для функции вывода на экран всех элементов списка с хвоста
void print_from_tail(node*);    //прототип функции вывода на экран всех элементов списка с хвоста
void print_element(node*, int); //прототип функции вывода на экран элемента из списка с указанием позиции